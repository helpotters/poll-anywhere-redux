:PROPERTIES:
:ID:       facab3f0-c0a3-4dbd-b906-71b6fcd80477
:END:
#+title: Readme
[[!Elmo][elmo.png]]
* Usage
Run the following command to installed required gems:
#+begin_src bash
bundle install
#+end_src
Run the server:
#+begin_src bash
bin/dev
#+end_src
* Why?
I decided to make this test application to showcase my work-flow and -style. I had admittedly had difficulties with the technical exercise under the 1hr constraint. However, I wanted to show what I'm normally like under most circumstances, and my thought process throughout a project.

I spent a couple of days on/off recreating the original base, and then spent the past two days focusing on the responses.


My intention was to complete this project, admittedly, at the sacrifice of test coverage. While my tests are currently 100% passing, I consider most of them to be a bit brittle and inflexible.
* Creation
My Reasonable Defaults template contains all of my normal tools that I install on most projects.

#+begin_src bash
rails new poll-anywhere-redux --database=postgresql -m "https://railsbytes.com/script/zOvs6r"
#+end_src
** Thought Process Behind Reasonable Defaults
The *Reasonable Defaults* template setups up the following:
- RSpec Workflow
  - Thoughtbot gems :: A company that makes excellent resources for Rails development
    - Factory Bot
    - Formulaic
    - Shoulda-matchers
  - Basic Gems ::
    - Capybara
    - RSpec + Rspec-rails
    - Faker :: For quick data testing. useful for factory bot
- HTML-related
  - HAML or ERB Templating :: Dev decides which one they want
    - Converts all templates to HAML if chosen
  - CSS Bundling :: Quickly install a common framework without hassle
- Immediately get started with development
  - okay, it actually needs a couple of file edits, but I'm working on that.
*  Testing :ATTACH:
:PROPERTIES:
:ID:       08633045-86c3-4b03-93be-cdf51f345a73
:END:
#+begin_src
Audience
  Joining
    Join Poll as Audience Member
    Fill with invalid id
  Answering Poll
    Audience Member Submits Valid Vote

Poll Interface
  Polls
    Host creates a new poll
  Options
    Adding Options
    Editing Options

Answer
  is expected to belong to poll required: true
  is expected to belong to option required: true
  is expected to belong to user required: true

Option
  is expected to validate that :title cannot be empty/falsy
  is expected to belong to poll required: true
  is expected to have many answers

Poll
  is expected to validate that :title cannot be empty/falsy
  is expected to have many options
  is expected to have many answers

User
  is expected to validate that :name cannot be empty/falsy
  is expected to have many answers
#+end_src

Here are the specs that I wrote for this project. It's primarily comprised of feature specs and units specs, reflecting the top-down approach I normally take.

There are some drawbacks, as I was missing coverage for handling nested
attributes (or other methods). While the code functions, a lack of propering testing introduces inflexibility with future refactoring.
* Points of Difficulty
Following nested attributes with nested resources was a bit tough, but I simply need to get improve my tdd-ing approach with form handling behind the scenes. Normally, I don't worry about implementation, however, I see the benefit of including it for these kinds of situations.
